Q: What happens when you initialize a repository? Why do you need to do it?

Creates a .git directory in the existing directory and creates metadata to track history.
So git is aware of which files to consider for version tracking.

Q: How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area contains files you want to add to the repository, whereas the working directory contains all files in the directory including files that are not added to the repository. This allows us to have files in the working directory which we do not want to add to the repository e.g. ad-hoc test file for a use-once purpose.

Q: How can you use the staging area to make sure you have one commit per logical change?

you can compare with the repository using git diff --staged to ensure the change you are about to commit is a logical change.
can also compare with the working directory using git diff to ensure that the changes you are currently working on are not part of the same logical changes in the staging area - if they are, add the file before committing.

Q: What are some situations when branches would be helpful in keeping your history organized? How would branches help?

You can use branches for experimental code, adding debug, trying out performance techniques or language translations.

Q: How do the diagrams help you visualize the branch structure?

Enables you to see parent and child commits and how the various commits and branch relate to one another.

Q: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

One branch where the commit has two parents. Enables us to see the relationships clearer.

